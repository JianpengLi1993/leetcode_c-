/*********************************************************************/
给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。

'.' 匹配任意单个字符
'*' 匹配零个或多个前面的那一个元素


所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。

说明:


	s 可能为空，且只包含从 a-z 的小写字母。
	p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。


示例 1:

输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。


示例 2:

输入:
s = "aa"
p = "a*"
输出: true
解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。


示例 3:

输入:
s = "ab"
p = ".*"
输出: true
解释: ".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。


示例 4:

输入:
s = "aab"
p = "c*a*b"
输出: true
解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。


示例 5:

输入:
s = "mississippi"
p = "mis*is*p*."
输出: false

思路：
https://blog.csdn.net/jfkidear/article/details/90261170
/*********************************************************************/

class Solution {
public:
    bool isMatch(string s, string p) {
        if (p.length()<=0)
            return s.length()<=0;
            
        //单个元素匹配成功的情况，统一用match表明。
        bool match = (s.length() > 0 && (s[0]==p[0] || p[0]=='.'));

        if (p.length() > 1 && p[1] == '*'){
        //一种是匹配0个，那么只需要跳过p中的这两个字符，继续与s中的字符进行比较即可，
        //如果是匹配多个，那么将s中的游标往后移动一个，继续进行判断，这两个条件只要其中一个能满足即可。
            return isMatch(s, p.substr(2)) || (match && isMatch(s.substr(1), p));
            
        } else {
        //第二个位置不是*时，第一个位置能否匹配单个元素成功。
            return match && isMatch(s.substr(1), p.substr(1));
        }

    }
};
